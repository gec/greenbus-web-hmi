# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                       controllers.Application.index
OPTIONS       /                                                       controllers.Application.preflight(path: String = "")
OPTIONS       /*path                                                  controllers.Application.preflight(path: String)

GET           /login                                                  controllers.Application.getLoginOrAlreadyLoggedIn
DELETE        /login                                                  controllers.Application.deleteLogin
POST          /login                                                  controllers.Application.postLogin

GET           /websocket                                              controllers.Application.getWebSocket( authToken)

GET           /apps/operator/                                         controllers.Application.appsOperator
GET           /apps/chart/popout                                      controllers.Application.appsChartPopout
GET           /apps/:app/menus/:menu                                  controllers.Application.getAppsMenus( app: String, menu: String)

GET           /models/:modelId/alarms                                 controllers.Application.getAlarms( modelId: String, states: List[String], ag: List[String], et: List[String], sv: List[Int], sb: List[String], limit: Int ?= 200, startAfterId: Option[String], latest: Boolean ?= true)
POST          /models/:modelId/alarms                                 controllers.Application.postAlarms( modelId: String)
GET           /models/:modelId/events                                 controllers.Application.getEvents( modelId: String, ag: List[String], et: List[String], sv: List[Int], sb: List[String], limit: Int ?= 200, startAfterId: Option[String], latest: Boolean ?= true)

GET           /models/:modelId/equipment                              controllers.Application.getEquipmentRoots( modelId: String, rootTypes: List[String], childTypes: List[String], depth: Int ?= 1, limit: Int ?= 200)
GET           /models/:modelId/equipment/:entityId                    controllers.Application.getEquipment( modelId: String, entityId: String, childTypes: List[String], depth: Int ?= 1, limit: Int ?= 200)
GET           /models/:modelId/equipment/:entityId/descendants        controllers.Application.getEquipmentDescendants( modelId: String, entityId: String, childTypes: List[String], depth: Int ?= 1, limit: Int ?= 200)
GET           /models/:modelId/equipment/:entityId/properties         controllers.Application.getEquipmentProperties( modelId: String, entityId: String, keys: List[String], values: Boolean ?= true)
GET           /models/:modelId/equipment/:entityId/properties/:key    controllers.Application.getEquipmentProperty( modelId: String, entityId: String, key: String)

GET           /models/:modelId/points                                 controllers.Application.getPoints( modelId: String, pids: List[String], pnames: List[String], equipmentIds: List[String], pointTypes: List[String], depth: Int ?= 1, limit: Int ?= 200)
GET           /models/:modelId/points/:uuid                           controllers.Application.getPoint( modelId: String, uuid: String)
POST          /models/:modelId/points/commands                        controllers.Application.getPointsCommands( modelId: String)
POST          /models/:modelId/points/:pointId/override               controllers.Application.postPointOverride( modelId: String, pointId: String)
DELETE        /models/:modelId/points/:pointId/override               controllers.Application.deletePointOverrideOrNis( modelId: String, pointId: String)
POST          /models/:modelId/points/:pointId/nis                    controllers.Application.postPointNis( modelId: String, pointId: String)
DELETE        /models/:modelId/points/:pointId/nis                    controllers.Application.deletePointOverrideOrNis( modelId: String, pointId: String)

POST          /models/:modelId/commandlock                            controllers.Application.postCommandLock( modelId: String)
DELETE        /models/:modelId/commandlock/:id                        controllers.Application.deleteCommandLock( modelId: String, id: String)
POST          /models/:modelId/commands/:id                           controllers.Application.postCommand( modelId: String, id: String)

GET           /models/:modelId/measurements                           controllers.Application.getMeasurements( modelId: String, pids: List[String], pnames: List[String], equipmentIds: List[String], pointTypes: List[String], depth: Int ?= 1, limit: Int ?= 200)

GET           /models/:modelId/endpoints                              controllers.Application.getEndpoints( modelId: String)

# Enable webjar based resources to be returned
GET           /webjars/*file                                          controllers.WebJarAssets.at(file)

# Map static resources from the /public folder to the /assets URL path
#GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET           /*file                                                  controllers.Assets.versioned(path="/public", file: Asset)
